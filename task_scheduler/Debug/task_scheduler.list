
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e04  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08000fb0  08000fb0  00001fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001038  08001038  0000306c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001038  08001038  0000306c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001038  08001038  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001038  08001038  00002038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800103c  0800103c  0000203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001040  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000306c  2**0
                  CONTENTS
 10 .bss          00000180  2000006c  2000006c  0000306c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0000306c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b0b  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c6  00000000  00000000  00003ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00003f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000119  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d81  00000000  00000000  00004211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000151a  00000000  00000000  00006f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b65  00000000  00000000  000084ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012011  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b8c  00000000  00000000  00012054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00012be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000f98 	.word	0x08000f98

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000070 	.word	0x20000070
 80001e8:	08000f98 	.word	0x08000f98

080001ec <main>:
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; // task1 is running

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80001f0:	f000 f8c8 	bl	8000384 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80001f4:	480d      	ldr	r0, [pc, #52]	@ (800022c <main+0x40>)
 80001f6:	f000 f879 	bl	80002ec <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000230 <main+0x44>)
 80001fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000234 <main+0x48>)
 80001fe:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000200:	4a0d      	ldr	r2, [pc, #52]	@ (8000238 <main+0x4c>)
 8000202:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <main+0x48>)
 8000204:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000206:	4a0d      	ldr	r2, [pc, #52]	@ (800023c <main+0x50>)
 8000208:	4b0a      	ldr	r3, [pc, #40]	@ (8000234 <main+0x48>)
 800020a:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 800020c:	4a0c      	ldr	r2, [pc, #48]	@ (8000240 <main+0x54>)
 800020e:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <main+0x48>)
 8000210:	60da      	str	r2, [r3, #12]


	init_tasks_stack();
 8000212:	f000 f871 	bl	80002f8 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000216:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800021a:	f000 f833 	bl	8000284 <init_systick_timer>

	switch_sp_to_psp();
 800021e:	f000 f909 	bl	8000434 <switch_sp_to_psp>

	task1_handler();
 8000222:	f000 f80f 	bl	8000244 <task1_handler>

	for(;;);
 8000226:	bf00      	nop
 8000228:	e7fd      	b.n	8000226 <main+0x3a>
 800022a:	bf00      	nop
 800022c:	2001f000 	.word	0x2001f000
 8000230:	08000245 	.word	0x08000245
 8000234:	20000088 	.word	0x20000088
 8000238:	08000255 	.word	0x08000255
 800023c:	08000265 	.word	0x08000265
 8000240:	08000275 	.word	0x08000275

08000244 <task1_handler>:
}

void task1_handler(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is a task1\n");
 8000248:	4801      	ldr	r0, [pc, #4]	@ (8000250 <task1_handler+0xc>)
 800024a:	f000 fb15 	bl	8000878 <puts>
 800024e:	e7fb      	b.n	8000248 <task1_handler+0x4>
 8000250:	08000fb0 	.word	0x08000fb0

08000254 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is a task2\n");
 8000258:	4801      	ldr	r0, [pc, #4]	@ (8000260 <task2_handler+0xc>)
 800025a:	f000 fb0d 	bl	8000878 <puts>
 800025e:	e7fb      	b.n	8000258 <task2_handler+0x4>
 8000260:	08000fc0 	.word	0x08000fc0

08000264 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is a task3\n");
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <task3_handler+0xc>)
 800026a:	f000 fb05 	bl	8000878 <puts>
 800026e:	e7fb      	b.n	8000268 <task3_handler+0x4>
 8000270:	08000fd0 	.word	0x08000fd0

08000274 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("this is a task4\n");
 8000278:	4801      	ldr	r0, [pc, #4]	@ (8000280 <task4_handler+0xc>)
 800027a:	f000 fafd 	bl	8000878 <puts>
 800027e:	e7fb      	b.n	8000278 <task4_handler+0x4>
 8000280:	08000fe0 	.word	0x08000fe0

08000284 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000284:	b480      	push	{r7}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800028c:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <init_systick_timer+0x5c>)
 800028e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <init_systick_timer+0x60>)
 8000292:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1;
 8000294:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <init_systick_timer+0x64>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	fbb2 f3f3 	udiv	r3, r2, r3
 800029c:	3b01      	subs	r3, #1
 800029e:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]

	// Load the value into SVR
	*pSRVR |= count_value;
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	431a      	orrs	r2, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	601a      	str	r2, [r3, #0]

	// Do some setting
	*pSCSR |= ( 1 << 1 ); // Enables SysTick exception request;
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f043 0202 	orr.w	r2, r3, #2
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2 ); // Indicates the clock source, processor clock source
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0204 	orr.w	r2, r3, #4
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	601a      	str	r2, [r3, #0]

	// Enables the systick
	*pSCSR |= ( 1 << 0 );
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0201 	orr.w	r2, r3, #1
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	e000e014 	.word	0xe000e014
 80002e4:	e000e010 	.word	0xe000e010
 80002e8:	00f42400 	.word	0x00f42400

080002ec <init_scheduler_stack>:

__attribute__ ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80002ec:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": : "r" (sched_top_of_stack) : );
 80002ee:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002f2:	4770      	bx	lr
}
 80002f4:	bf00      	nop
	...

080002f8 <init_tasks_stack>:

void init_tasks_stack(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	e032      	b.n	800036a <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*) psp_of_tasks[i];
 8000304:	4a1d      	ldr	r2, [pc, #116]	@ (800037c <init_tasks_stack+0x84>)
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3b04      	subs	r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800031a:	601a      	str	r2, [r3, #0]

		pPSP--; // PC
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3b04      	subs	r3, #4
 8000320:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000322:	4a17      	ldr	r2, [pc, #92]	@ (8000380 <init_tasks_stack+0x88>)
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	601a      	str	r2, [r3, #0]

		pPSP--; // LR
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b04      	subs	r3, #4
 8000332:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f06f 0202 	mvn.w	r2, #2
 800033a:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	e008      	b.n	8000354 <init_tasks_stack+0x5c>
		{
			pPSP--;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3b04      	subs	r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3301      	adds	r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b0c      	cmp	r3, #12
 8000358:	ddf3      	ble.n	8000342 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	4907      	ldr	r1, [pc, #28]	@ (800037c <init_tasks_stack+0x84>)
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++)
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	3301      	adds	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	2b03      	cmp	r3, #3
 800036e:	ddc9      	ble.n	8000304 <init_tasks_stack+0xc>

	}

}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	20000000 	.word	0x20000000
 8000380:	20000088 	.word	0x20000088

08000384 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800038a:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <enable_processor_faults+0x38>)
 800038c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16 ); // mem manage
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17 ); // bus fault
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18 ); // usage fault
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000ed24 	.word	0xe000ed24

080003c0 <get_psp_value>:

uint32_t get_psp_value(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003c4:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <get_psp_value+0x18>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <get_psp_value+0x1c>)
 80003cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	20000098 	.word	0x20000098
 80003dc:	20000000 	.word	0x20000000

080003e0 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <save_psp_value+0x20>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	4619      	mov	r1, r3
 80003ee:	4a05      	ldr	r2, [pc, #20]	@ (8000404 <save_psp_value+0x24>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	20000098 	.word	0x20000098
 8000404:	20000000 	.word	0x20000000

08000408 <update_next_task>:

void update_next_task(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	current_task++;
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <update_next_task+0x28>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <update_next_task+0x28>)
 8000416:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000418:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <update_next_task+0x28>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	f003 0303 	and.w	r3, r3, #3
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <update_next_task+0x28>)
 8000424:	701a      	strb	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000098 	.word	0x20000098

08000434 <switch_sp_to_psp>:
__attribute__ ((naked)) void switch_sp_to_psp(void)
{
	// 1. Initialize the PSP with TASK1 stack start address

	// get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); // preserve LR which connects back to main()
 8000434:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000436:	f7ff ffc3 	bl	80003c0 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); // initialize psp
 800043a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); // pops back LR value
 800043e:	f85d eb04 	ldr.w	lr, [sp], #4


	// 2. Change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");
 8000442:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000446:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800044a:	4770      	bx	lr
}
 800044c:	bf00      	nop

0800044e <SysTick_Handler>:


void SysTick_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
	/* Save the context of current task */

	// 1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000452:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value store SF2 ( R4 to R11 )
	__asm volatile("STMDB R0!,{R4-R11}");
 8000456:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 3. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 800045a:	f7ff ffc1 	bl	80003e0 <save_psp_value>

	/* Retrieve the context of next task */

	// 1. Decide next task to run
	__asm volatile("BL update_next_task");
 800045e:	f7ff ffd3 	bl	8000408 <update_next_task>
	// 2. Get its past PSP value
	__asm volatile("BL get_psp_value");
 8000462:	f7ff ffad 	bl	80003c0 <get_psp_value>
	// 3. Using that PSP value retrieve SF2 ( R4 to R11 )
	__asm volatile("LDMIA R0!,{R4-R11}");
 8000466:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 4. Update PSP and exit
	__asm volatile("MSR PSP,R0");
 800046a:	f380 8809 	msr	PSP, r0

}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
	...

08000478 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <HardFault_Handler+0x10>)
 800047e:	f000 f9fb 	bl	8000878 <puts>
	while(1);
 8000482:	bf00      	nop
 8000484:	e7fd      	b.n	8000482 <HardFault_Handler+0xa>
 8000486:	bf00      	nop
 8000488:	08000ff0 	.word	0x08000ff0

0800048c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000490:	4802      	ldr	r0, [pc, #8]	@ (800049c <MemManage_Handler+0x10>)
 8000492:	f000 f9f1 	bl	8000878 <puts>
	while(1);
 8000496:	bf00      	nop
 8000498:	e7fd      	b.n	8000496 <MemManage_Handler+0xa>
 800049a:	bf00      	nop
 800049c:	08001008 	.word	0x08001008

080004a0 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <BusFault_Handler+0x10>)
 80004a6:	f000 f9e7 	bl	8000878 <puts>
	while(1);
 80004aa:	bf00      	nop
 80004ac:	e7fd      	b.n	80004aa <BusFault_Handler+0xa>
 80004ae:	bf00      	nop
 80004b0:	08001020 	.word	0x08001020

080004b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e00a      	b.n	80004dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004c6:	f3af 8000 	nop.w
 80004ca:	4601      	mov	r1, r0
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	60ba      	str	r2, [r7, #8]
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf0      	blt.n	80004c6 <_read+0x12>
  }

  return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e009      	b.n	8000514 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf1      	blt.n	8000500 <_write+0x12>
  }
  return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_close>:

int _close(int file)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800054c:	605a      	str	r2, [r3, #4]
  return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_isatty>:

int _isatty(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
	...

08000588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000590:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <_sbrk+0x5c>)
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <_sbrk+0x60>)
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800059c:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <_sbrk+0x64>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <_sbrk+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d207      	bcs.n	80005c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b8:	f000 f96e 	bl	8000898 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	220c      	movs	r2, #12
 80005c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c6:	e009      	b.n	80005dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ce:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a05      	ldr	r2, [pc, #20]	@ (80005ec <_sbrk+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20030000 	.word	0x20030000
 80005e8:	00000400 	.word	0x00000400
 80005ec:	2000009c 	.word	0x2000009c
 80005f0:	200001f0 	.word	0x200001f0

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f000 f93f 	bl	80008a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fde1 	bl	80001ec <main>

0800062a <LoopForever>:

LoopForever:
  b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000638:	08001040 	.word	0x08001040
  ldr r2, =_sbss
 800063c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000640:	200001ec 	.word	0x200001ec

08000644 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC_IRQHandler>
	...

08000648 <std>:
 8000648:	2300      	movs	r3, #0
 800064a:	b510      	push	{r4, lr}
 800064c:	4604      	mov	r4, r0
 800064e:	e9c0 3300 	strd	r3, r3, [r0]
 8000652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000656:	6083      	str	r3, [r0, #8]
 8000658:	8181      	strh	r1, [r0, #12]
 800065a:	6643      	str	r3, [r0, #100]	@ 0x64
 800065c:	81c2      	strh	r2, [r0, #14]
 800065e:	6183      	str	r3, [r0, #24]
 8000660:	4619      	mov	r1, r3
 8000662:	2208      	movs	r2, #8
 8000664:	305c      	adds	r0, #92	@ 0x5c
 8000666:	f000 f90f 	bl	8000888 <memset>
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <std+0x58>)
 800066c:	6263      	str	r3, [r4, #36]	@ 0x24
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <std+0x5c>)
 8000670:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <std+0x60>)
 8000674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <std+0x64>)
 8000678:	6323      	str	r3, [r4, #48]	@ 0x30
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <std+0x68>)
 800067c:	6224      	str	r4, [r4, #32]
 800067e:	429c      	cmp	r4, r3
 8000680:	d006      	beq.n	8000690 <std+0x48>
 8000682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000686:	4294      	cmp	r4, r2
 8000688:	d002      	beq.n	8000690 <std+0x48>
 800068a:	33d0      	adds	r3, #208	@ 0xd0
 800068c:	429c      	cmp	r4, r3
 800068e:	d105      	bne.n	800069c <std+0x54>
 8000690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000698:	f000 b928 	b.w	80008ec <__retarget_lock_init_recursive>
 800069c:	bd10      	pop	{r4, pc}
 800069e:	bf00      	nop
 80006a0:	08000ba1 	.word	0x08000ba1
 80006a4:	08000bc3 	.word	0x08000bc3
 80006a8:	08000bfb 	.word	0x08000bfb
 80006ac:	08000c1f 	.word	0x08000c1f
 80006b0:	200000a0 	.word	0x200000a0

080006b4 <stdio_exit_handler>:
 80006b4:	4a02      	ldr	r2, [pc, #8]	@ (80006c0 <stdio_exit_handler+0xc>)
 80006b6:	4903      	ldr	r1, [pc, #12]	@ (80006c4 <stdio_exit_handler+0x10>)
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <stdio_exit_handler+0x14>)
 80006ba:	f000 b869 	b.w	8000790 <_fwalk_sglue>
 80006be:	bf00      	nop
 80006c0:	20000010 	.word	0x20000010
 80006c4:	08000b39 	.word	0x08000b39
 80006c8:	20000020 	.word	0x20000020

080006cc <cleanup_stdio>:
 80006cc:	6841      	ldr	r1, [r0, #4]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <cleanup_stdio+0x34>)
 80006d0:	4299      	cmp	r1, r3
 80006d2:	b510      	push	{r4, lr}
 80006d4:	4604      	mov	r4, r0
 80006d6:	d001      	beq.n	80006dc <cleanup_stdio+0x10>
 80006d8:	f000 fa2e 	bl	8000b38 <_fflush_r>
 80006dc:	68a1      	ldr	r1, [r4, #8]
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <cleanup_stdio+0x38>)
 80006e0:	4299      	cmp	r1, r3
 80006e2:	d002      	beq.n	80006ea <cleanup_stdio+0x1e>
 80006e4:	4620      	mov	r0, r4
 80006e6:	f000 fa27 	bl	8000b38 <_fflush_r>
 80006ea:	68e1      	ldr	r1, [r4, #12]
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <cleanup_stdio+0x3c>)
 80006ee:	4299      	cmp	r1, r3
 80006f0:	d004      	beq.n	80006fc <cleanup_stdio+0x30>
 80006f2:	4620      	mov	r0, r4
 80006f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f8:	f000 ba1e 	b.w	8000b38 <_fflush_r>
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	bf00      	nop
 8000700:	200000a0 	.word	0x200000a0
 8000704:	20000108 	.word	0x20000108
 8000708:	20000170 	.word	0x20000170

0800070c <global_stdio_init.part.0>:
 800070c:	b510      	push	{r4, lr}
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <global_stdio_init.part.0+0x30>)
 8000710:	4c0b      	ldr	r4, [pc, #44]	@ (8000740 <global_stdio_init.part.0+0x34>)
 8000712:	4a0c      	ldr	r2, [pc, #48]	@ (8000744 <global_stdio_init.part.0+0x38>)
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	4620      	mov	r0, r4
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	f7ff ff94 	bl	8000648 <std>
 8000720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000724:	2201      	movs	r2, #1
 8000726:	2109      	movs	r1, #9
 8000728:	f7ff ff8e 	bl	8000648 <std>
 800072c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000730:	2202      	movs	r2, #2
 8000732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000736:	2112      	movs	r1, #18
 8000738:	f7ff bf86 	b.w	8000648 <std>
 800073c:	200001d8 	.word	0x200001d8
 8000740:	200000a0 	.word	0x200000a0
 8000744:	080006b5 	.word	0x080006b5

08000748 <__sfp_lock_acquire>:
 8000748:	4801      	ldr	r0, [pc, #4]	@ (8000750 <__sfp_lock_acquire+0x8>)
 800074a:	f000 b8d0 	b.w	80008ee <__retarget_lock_acquire_recursive>
 800074e:	bf00      	nop
 8000750:	200001dd 	.word	0x200001dd

08000754 <__sfp_lock_release>:
 8000754:	4801      	ldr	r0, [pc, #4]	@ (800075c <__sfp_lock_release+0x8>)
 8000756:	f000 b8cb 	b.w	80008f0 <__retarget_lock_release_recursive>
 800075a:	bf00      	nop
 800075c:	200001dd 	.word	0x200001dd

08000760 <__sinit>:
 8000760:	b510      	push	{r4, lr}
 8000762:	4604      	mov	r4, r0
 8000764:	f7ff fff0 	bl	8000748 <__sfp_lock_acquire>
 8000768:	6a23      	ldr	r3, [r4, #32]
 800076a:	b11b      	cbz	r3, 8000774 <__sinit+0x14>
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f7ff bff0 	b.w	8000754 <__sfp_lock_release>
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <__sinit+0x28>)
 8000776:	6223      	str	r3, [r4, #32]
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <__sinit+0x2c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f5      	bne.n	800076c <__sinit+0xc>
 8000780:	f7ff ffc4 	bl	800070c <global_stdio_init.part.0>
 8000784:	e7f2      	b.n	800076c <__sinit+0xc>
 8000786:	bf00      	nop
 8000788:	080006cd 	.word	0x080006cd
 800078c:	200001d8 	.word	0x200001d8

08000790 <_fwalk_sglue>:
 8000790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000794:	4607      	mov	r7, r0
 8000796:	4688      	mov	r8, r1
 8000798:	4614      	mov	r4, r2
 800079a:	2600      	movs	r6, #0
 800079c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007a0:	f1b9 0901 	subs.w	r9, r9, #1
 80007a4:	d505      	bpl.n	80007b2 <_fwalk_sglue+0x22>
 80007a6:	6824      	ldr	r4, [r4, #0]
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d1f7      	bne.n	800079c <_fwalk_sglue+0xc>
 80007ac:	4630      	mov	r0, r6
 80007ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007b2:	89ab      	ldrh	r3, [r5, #12]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d907      	bls.n	80007c8 <_fwalk_sglue+0x38>
 80007b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007bc:	3301      	adds	r3, #1
 80007be:	d003      	beq.n	80007c8 <_fwalk_sglue+0x38>
 80007c0:	4629      	mov	r1, r5
 80007c2:	4638      	mov	r0, r7
 80007c4:	47c0      	blx	r8
 80007c6:	4306      	orrs	r6, r0
 80007c8:	3568      	adds	r5, #104	@ 0x68
 80007ca:	e7e9      	b.n	80007a0 <_fwalk_sglue+0x10>

080007cc <_puts_r>:
 80007cc:	6a03      	ldr	r3, [r0, #32]
 80007ce:	b570      	push	{r4, r5, r6, lr}
 80007d0:	6884      	ldr	r4, [r0, #8]
 80007d2:	4605      	mov	r5, r0
 80007d4:	460e      	mov	r6, r1
 80007d6:	b90b      	cbnz	r3, 80007dc <_puts_r+0x10>
 80007d8:	f7ff ffc2 	bl	8000760 <__sinit>
 80007dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007de:	07db      	lsls	r3, r3, #31
 80007e0:	d405      	bmi.n	80007ee <_puts_r+0x22>
 80007e2:	89a3      	ldrh	r3, [r4, #12]
 80007e4:	0598      	lsls	r0, r3, #22
 80007e6:	d402      	bmi.n	80007ee <_puts_r+0x22>
 80007e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007ea:	f000 f880 	bl	80008ee <__retarget_lock_acquire_recursive>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	0719      	lsls	r1, r3, #28
 80007f2:	d502      	bpl.n	80007fa <_puts_r+0x2e>
 80007f4:	6923      	ldr	r3, [r4, #16]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d135      	bne.n	8000866 <_puts_r+0x9a>
 80007fa:	4621      	mov	r1, r4
 80007fc:	4628      	mov	r0, r5
 80007fe:	f000 fa51 	bl	8000ca4 <__swsetup_r>
 8000802:	b380      	cbz	r0, 8000866 <_puts_r+0x9a>
 8000804:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800080a:	07da      	lsls	r2, r3, #31
 800080c:	d405      	bmi.n	800081a <_puts_r+0x4e>
 800080e:	89a3      	ldrh	r3, [r4, #12]
 8000810:	059b      	lsls	r3, r3, #22
 8000812:	d402      	bmi.n	800081a <_puts_r+0x4e>
 8000814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000816:	f000 f86b 	bl	80008f0 <__retarget_lock_release_recursive>
 800081a:	4628      	mov	r0, r5
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	2b00      	cmp	r3, #0
 8000820:	da04      	bge.n	800082c <_puts_r+0x60>
 8000822:	69a2      	ldr	r2, [r4, #24]
 8000824:	429a      	cmp	r2, r3
 8000826:	dc17      	bgt.n	8000858 <_puts_r+0x8c>
 8000828:	290a      	cmp	r1, #10
 800082a:	d015      	beq.n	8000858 <_puts_r+0x8c>
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	6022      	str	r2, [r4, #0]
 8000832:	7019      	strb	r1, [r3, #0]
 8000834:	68a3      	ldr	r3, [r4, #8]
 8000836:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800083a:	3b01      	subs	r3, #1
 800083c:	60a3      	str	r3, [r4, #8]
 800083e:	2900      	cmp	r1, #0
 8000840:	d1ed      	bne.n	800081e <_puts_r+0x52>
 8000842:	2b00      	cmp	r3, #0
 8000844:	da11      	bge.n	800086a <_puts_r+0x9e>
 8000846:	4622      	mov	r2, r4
 8000848:	210a      	movs	r1, #10
 800084a:	4628      	mov	r0, r5
 800084c:	f000 f9eb 	bl	8000c26 <__swbuf_r>
 8000850:	3001      	adds	r0, #1
 8000852:	d0d7      	beq.n	8000804 <_puts_r+0x38>
 8000854:	250a      	movs	r5, #10
 8000856:	e7d7      	b.n	8000808 <_puts_r+0x3c>
 8000858:	4622      	mov	r2, r4
 800085a:	4628      	mov	r0, r5
 800085c:	f000 f9e3 	bl	8000c26 <__swbuf_r>
 8000860:	3001      	adds	r0, #1
 8000862:	d1e7      	bne.n	8000834 <_puts_r+0x68>
 8000864:	e7ce      	b.n	8000804 <_puts_r+0x38>
 8000866:	3e01      	subs	r6, #1
 8000868:	e7e4      	b.n	8000834 <_puts_r+0x68>
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	6022      	str	r2, [r4, #0]
 8000870:	220a      	movs	r2, #10
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e7ee      	b.n	8000854 <_puts_r+0x88>
	...

08000878 <puts>:
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <puts+0xc>)
 800087a:	4601      	mov	r1, r0
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	f7ff bfa5 	b.w	80007cc <_puts_r>
 8000882:	bf00      	nop
 8000884:	2000001c 	.word	0x2000001c

08000888 <memset>:
 8000888:	4402      	add	r2, r0
 800088a:	4603      	mov	r3, r0
 800088c:	4293      	cmp	r3, r2
 800088e:	d100      	bne.n	8000892 <memset+0xa>
 8000890:	4770      	bx	lr
 8000892:	f803 1b01 	strb.w	r1, [r3], #1
 8000896:	e7f9      	b.n	800088c <memset+0x4>

08000898 <__errno>:
 8000898:	4b01      	ldr	r3, [pc, #4]	@ (80008a0 <__errno+0x8>)
 800089a:	6818      	ldr	r0, [r3, #0]
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000001c 	.word	0x2000001c

080008a4 <__libc_init_array>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	4d0d      	ldr	r5, [pc, #52]	@ (80008dc <__libc_init_array+0x38>)
 80008a8:	4c0d      	ldr	r4, [pc, #52]	@ (80008e0 <__libc_init_array+0x3c>)
 80008aa:	1b64      	subs	r4, r4, r5
 80008ac:	10a4      	asrs	r4, r4, #2
 80008ae:	2600      	movs	r6, #0
 80008b0:	42a6      	cmp	r6, r4
 80008b2:	d109      	bne.n	80008c8 <__libc_init_array+0x24>
 80008b4:	4d0b      	ldr	r5, [pc, #44]	@ (80008e4 <__libc_init_array+0x40>)
 80008b6:	4c0c      	ldr	r4, [pc, #48]	@ (80008e8 <__libc_init_array+0x44>)
 80008b8:	f000 fb6e 	bl	8000f98 <_init>
 80008bc:	1b64      	subs	r4, r4, r5
 80008be:	10a4      	asrs	r4, r4, #2
 80008c0:	2600      	movs	r6, #0
 80008c2:	42a6      	cmp	r6, r4
 80008c4:	d105      	bne.n	80008d2 <__libc_init_array+0x2e>
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008cc:	4798      	blx	r3
 80008ce:	3601      	adds	r6, #1
 80008d0:	e7ee      	b.n	80008b0 <__libc_init_array+0xc>
 80008d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d6:	4798      	blx	r3
 80008d8:	3601      	adds	r6, #1
 80008da:	e7f2      	b.n	80008c2 <__libc_init_array+0x1e>
 80008dc:	08001038 	.word	0x08001038
 80008e0:	08001038 	.word	0x08001038
 80008e4:	08001038 	.word	0x08001038
 80008e8:	0800103c 	.word	0x0800103c

080008ec <__retarget_lock_init_recursive>:
 80008ec:	4770      	bx	lr

080008ee <__retarget_lock_acquire_recursive>:
 80008ee:	4770      	bx	lr

080008f0 <__retarget_lock_release_recursive>:
 80008f0:	4770      	bx	lr
	...

080008f4 <sbrk_aligned>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4e0f      	ldr	r6, [pc, #60]	@ (8000934 <sbrk_aligned+0x40>)
 80008f8:	460c      	mov	r4, r1
 80008fa:	6831      	ldr	r1, [r6, #0]
 80008fc:	4605      	mov	r5, r0
 80008fe:	b911      	cbnz	r1, 8000906 <sbrk_aligned+0x12>
 8000900:	f000 fabc 	bl	8000e7c <_sbrk_r>
 8000904:	6030      	str	r0, [r6, #0]
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 fab7 	bl	8000e7c <_sbrk_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	d103      	bne.n	800091a <sbrk_aligned+0x26>
 8000912:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000916:	4620      	mov	r0, r4
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	1cc4      	adds	r4, r0, #3
 800091c:	f024 0403 	bic.w	r4, r4, #3
 8000920:	42a0      	cmp	r0, r4
 8000922:	d0f8      	beq.n	8000916 <sbrk_aligned+0x22>
 8000924:	1a21      	subs	r1, r4, r0
 8000926:	4628      	mov	r0, r5
 8000928:	f000 faa8 	bl	8000e7c <_sbrk_r>
 800092c:	3001      	adds	r0, #1
 800092e:	d1f2      	bne.n	8000916 <sbrk_aligned+0x22>
 8000930:	e7ef      	b.n	8000912 <sbrk_aligned+0x1e>
 8000932:	bf00      	nop
 8000934:	200001e0 	.word	0x200001e0

08000938 <_malloc_r>:
 8000938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800093c:	1ccd      	adds	r5, r1, #3
 800093e:	f025 0503 	bic.w	r5, r5, #3
 8000942:	3508      	adds	r5, #8
 8000944:	2d0c      	cmp	r5, #12
 8000946:	bf38      	it	cc
 8000948:	250c      	movcc	r5, #12
 800094a:	2d00      	cmp	r5, #0
 800094c:	4606      	mov	r6, r0
 800094e:	db01      	blt.n	8000954 <_malloc_r+0x1c>
 8000950:	42a9      	cmp	r1, r5
 8000952:	d904      	bls.n	800095e <_malloc_r+0x26>
 8000954:	230c      	movs	r3, #12
 8000956:	6033      	str	r3, [r6, #0]
 8000958:	2000      	movs	r0, #0
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a34 <_malloc_r+0xfc>
 8000962:	f000 f911 	bl	8000b88 <__malloc_lock>
 8000966:	f8d8 3000 	ldr.w	r3, [r8]
 800096a:	461c      	mov	r4, r3
 800096c:	bb44      	cbnz	r4, 80009c0 <_malloc_r+0x88>
 800096e:	4629      	mov	r1, r5
 8000970:	4630      	mov	r0, r6
 8000972:	f7ff ffbf 	bl	80008f4 <sbrk_aligned>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	4604      	mov	r4, r0
 800097a:	d158      	bne.n	8000a2e <_malloc_r+0xf6>
 800097c:	f8d8 4000 	ldr.w	r4, [r8]
 8000980:	4627      	mov	r7, r4
 8000982:	2f00      	cmp	r7, #0
 8000984:	d143      	bne.n	8000a0e <_malloc_r+0xd6>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d04b      	beq.n	8000a22 <_malloc_r+0xea>
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	4639      	mov	r1, r7
 800098e:	4630      	mov	r0, r6
 8000990:	eb04 0903 	add.w	r9, r4, r3
 8000994:	f000 fa72 	bl	8000e7c <_sbrk_r>
 8000998:	4581      	cmp	r9, r0
 800099a:	d142      	bne.n	8000a22 <_malloc_r+0xea>
 800099c:	6821      	ldr	r1, [r4, #0]
 800099e:	1a6d      	subs	r5, r5, r1
 80009a0:	4629      	mov	r1, r5
 80009a2:	4630      	mov	r0, r6
 80009a4:	f7ff ffa6 	bl	80008f4 <sbrk_aligned>
 80009a8:	3001      	adds	r0, #1
 80009aa:	d03a      	beq.n	8000a22 <_malloc_r+0xea>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	442b      	add	r3, r5
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	f8d8 3000 	ldr.w	r3, [r8]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	bb62      	cbnz	r2, 8000a14 <_malloc_r+0xdc>
 80009ba:	f8c8 7000 	str.w	r7, [r8]
 80009be:	e00f      	b.n	80009e0 <_malloc_r+0xa8>
 80009c0:	6822      	ldr	r2, [r4, #0]
 80009c2:	1b52      	subs	r2, r2, r5
 80009c4:	d420      	bmi.n	8000a08 <_malloc_r+0xd0>
 80009c6:	2a0b      	cmp	r2, #11
 80009c8:	d917      	bls.n	80009fa <_malloc_r+0xc2>
 80009ca:	1961      	adds	r1, r4, r5
 80009cc:	42a3      	cmp	r3, r4
 80009ce:	6025      	str	r5, [r4, #0]
 80009d0:	bf18      	it	ne
 80009d2:	6059      	strne	r1, [r3, #4]
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	bf08      	it	eq
 80009d8:	f8c8 1000 	streq.w	r1, [r8]
 80009dc:	5162      	str	r2, [r4, r5]
 80009de:	604b      	str	r3, [r1, #4]
 80009e0:	4630      	mov	r0, r6
 80009e2:	f000 f8d7 	bl	8000b94 <__malloc_unlock>
 80009e6:	f104 000b 	add.w	r0, r4, #11
 80009ea:	1d23      	adds	r3, r4, #4
 80009ec:	f020 0007 	bic.w	r0, r0, #7
 80009f0:	1ac2      	subs	r2, r0, r3
 80009f2:	bf1c      	itt	ne
 80009f4:	1a1b      	subne	r3, r3, r0
 80009f6:	50a3      	strne	r3, [r4, r2]
 80009f8:	e7af      	b.n	800095a <_malloc_r+0x22>
 80009fa:	6862      	ldr	r2, [r4, #4]
 80009fc:	42a3      	cmp	r3, r4
 80009fe:	bf0c      	ite	eq
 8000a00:	f8c8 2000 	streq.w	r2, [r8]
 8000a04:	605a      	strne	r2, [r3, #4]
 8000a06:	e7eb      	b.n	80009e0 <_malloc_r+0xa8>
 8000a08:	4623      	mov	r3, r4
 8000a0a:	6864      	ldr	r4, [r4, #4]
 8000a0c:	e7ae      	b.n	800096c <_malloc_r+0x34>
 8000a0e:	463c      	mov	r4, r7
 8000a10:	687f      	ldr	r7, [r7, #4]
 8000a12:	e7b6      	b.n	8000982 <_malloc_r+0x4a>
 8000a14:	461a      	mov	r2, r3
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d1fb      	bne.n	8000a14 <_malloc_r+0xdc>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6053      	str	r3, [r2, #4]
 8000a20:	e7de      	b.n	80009e0 <_malloc_r+0xa8>
 8000a22:	230c      	movs	r3, #12
 8000a24:	6033      	str	r3, [r6, #0]
 8000a26:	4630      	mov	r0, r6
 8000a28:	f000 f8b4 	bl	8000b94 <__malloc_unlock>
 8000a2c:	e794      	b.n	8000958 <_malloc_r+0x20>
 8000a2e:	6005      	str	r5, [r0, #0]
 8000a30:	e7d6      	b.n	80009e0 <_malloc_r+0xa8>
 8000a32:	bf00      	nop
 8000a34:	200001e4 	.word	0x200001e4

08000a38 <__sflush_r>:
 8000a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	0716      	lsls	r6, r2, #28
 8000a40:	4605      	mov	r5, r0
 8000a42:	460c      	mov	r4, r1
 8000a44:	d454      	bmi.n	8000af0 <__sflush_r+0xb8>
 8000a46:	684b      	ldr	r3, [r1, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dc02      	bgt.n	8000a52 <__sflush_r+0x1a>
 8000a4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	dd48      	ble.n	8000ae4 <__sflush_r+0xac>
 8000a52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a54:	2e00      	cmp	r6, #0
 8000a56:	d045      	beq.n	8000ae4 <__sflush_r+0xac>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000a5e:	682f      	ldr	r7, [r5, #0]
 8000a60:	6a21      	ldr	r1, [r4, #32]
 8000a62:	602b      	str	r3, [r5, #0]
 8000a64:	d030      	beq.n	8000ac8 <__sflush_r+0x90>
 8000a66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	0759      	lsls	r1, r3, #29
 8000a6c:	d505      	bpl.n	8000a7a <__sflush_r+0x42>
 8000a6e:	6863      	ldr	r3, [r4, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000a74:	b10b      	cbz	r3, 8000a7a <__sflush_r+0x42>
 8000a76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a78:	1ad2      	subs	r2, r2, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a7e:	6a21      	ldr	r1, [r4, #32]
 8000a80:	4628      	mov	r0, r5
 8000a82:	47b0      	blx	r6
 8000a84:	1c43      	adds	r3, r0, #1
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	d106      	bne.n	8000a98 <__sflush_r+0x60>
 8000a8a:	6829      	ldr	r1, [r5, #0]
 8000a8c:	291d      	cmp	r1, #29
 8000a8e:	d82b      	bhi.n	8000ae8 <__sflush_r+0xb0>
 8000a90:	4a28      	ldr	r2, [pc, #160]	@ (8000b34 <__sflush_r+0xfc>)
 8000a92:	40ca      	lsrs	r2, r1
 8000a94:	07d6      	lsls	r6, r2, #31
 8000a96:	d527      	bpl.n	8000ae8 <__sflush_r+0xb0>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6062      	str	r2, [r4, #4]
 8000a9c:	04d9      	lsls	r1, r3, #19
 8000a9e:	6922      	ldr	r2, [r4, #16]
 8000aa0:	6022      	str	r2, [r4, #0]
 8000aa2:	d504      	bpl.n	8000aae <__sflush_r+0x76>
 8000aa4:	1c42      	adds	r2, r0, #1
 8000aa6:	d101      	bne.n	8000aac <__sflush_r+0x74>
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	b903      	cbnz	r3, 8000aae <__sflush_r+0x76>
 8000aac:	6560      	str	r0, [r4, #84]	@ 0x54
 8000aae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ab0:	602f      	str	r7, [r5, #0]
 8000ab2:	b1b9      	cbz	r1, 8000ae4 <__sflush_r+0xac>
 8000ab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d002      	beq.n	8000ac2 <__sflush_r+0x8a>
 8000abc:	4628      	mov	r0, r5
 8000abe:	f000 fa21 	bl	8000f04 <_free_r>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ac6:	e00d      	b.n	8000ae4 <__sflush_r+0xac>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	4628      	mov	r0, r5
 8000acc:	47b0      	blx	r6
 8000ace:	4602      	mov	r2, r0
 8000ad0:	1c50      	adds	r0, r2, #1
 8000ad2:	d1c9      	bne.n	8000a68 <__sflush_r+0x30>
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0c6      	beq.n	8000a68 <__sflush_r+0x30>
 8000ada:	2b1d      	cmp	r3, #29
 8000adc:	d001      	beq.n	8000ae2 <__sflush_r+0xaa>
 8000ade:	2b16      	cmp	r3, #22
 8000ae0:	d11d      	bne.n	8000b1e <__sflush_r+0xe6>
 8000ae2:	602f      	str	r7, [r5, #0]
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e021      	b.n	8000b2c <__sflush_r+0xf4>
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	e01a      	b.n	8000b26 <__sflush_r+0xee>
 8000af0:	690f      	ldr	r7, [r1, #16]
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d0f6      	beq.n	8000ae4 <__sflush_r+0xac>
 8000af6:	0793      	lsls	r3, r2, #30
 8000af8:	680e      	ldr	r6, [r1, #0]
 8000afa:	bf08      	it	eq
 8000afc:	694b      	ldreq	r3, [r1, #20]
 8000afe:	600f      	str	r7, [r1, #0]
 8000b00:	bf18      	it	ne
 8000b02:	2300      	movne	r3, #0
 8000b04:	1bf6      	subs	r6, r6, r7
 8000b06:	608b      	str	r3, [r1, #8]
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	ddeb      	ble.n	8000ae4 <__sflush_r+0xac>
 8000b0c:	6a21      	ldr	r1, [r4, #32]
 8000b0e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000b12:	4633      	mov	r3, r6
 8000b14:	463a      	mov	r2, r7
 8000b16:	4628      	mov	r0, r5
 8000b18:	47e0      	blx	ip
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	dc07      	bgt.n	8000b2e <__sflush_r+0xf6>
 8000b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b26:	81a3      	strh	r3, [r4, #12]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b2e:	4407      	add	r7, r0
 8000b30:	1a36      	subs	r6, r6, r0
 8000b32:	e7e9      	b.n	8000b08 <__sflush_r+0xd0>
 8000b34:	20400001 	.word	0x20400001

08000b38 <_fflush_r>:
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	690b      	ldr	r3, [r1, #16]
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	460c      	mov	r4, r1
 8000b40:	b913      	cbnz	r3, 8000b48 <_fflush_r+0x10>
 8000b42:	2500      	movs	r5, #0
 8000b44:	4628      	mov	r0, r5
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	b118      	cbz	r0, 8000b52 <_fflush_r+0x1a>
 8000b4a:	6a03      	ldr	r3, [r0, #32]
 8000b4c:	b90b      	cbnz	r3, 8000b52 <_fflush_r+0x1a>
 8000b4e:	f7ff fe07 	bl	8000760 <__sinit>
 8000b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f3      	beq.n	8000b42 <_fflush_r+0xa>
 8000b5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000b5c:	07d0      	lsls	r0, r2, #31
 8000b5e:	d404      	bmi.n	8000b6a <_fflush_r+0x32>
 8000b60:	0599      	lsls	r1, r3, #22
 8000b62:	d402      	bmi.n	8000b6a <_fflush_r+0x32>
 8000b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b66:	f7ff fec2 	bl	80008ee <__retarget_lock_acquire_recursive>
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	f7ff ff63 	bl	8000a38 <__sflush_r>
 8000b72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b74:	07da      	lsls	r2, r3, #31
 8000b76:	4605      	mov	r5, r0
 8000b78:	d4e4      	bmi.n	8000b44 <_fflush_r+0xc>
 8000b7a:	89a3      	ldrh	r3, [r4, #12]
 8000b7c:	059b      	lsls	r3, r3, #22
 8000b7e:	d4e1      	bmi.n	8000b44 <_fflush_r+0xc>
 8000b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b82:	f7ff feb5 	bl	80008f0 <__retarget_lock_release_recursive>
 8000b86:	e7dd      	b.n	8000b44 <_fflush_r+0xc>

08000b88 <__malloc_lock>:
 8000b88:	4801      	ldr	r0, [pc, #4]	@ (8000b90 <__malloc_lock+0x8>)
 8000b8a:	f7ff beb0 	b.w	80008ee <__retarget_lock_acquire_recursive>
 8000b8e:	bf00      	nop
 8000b90:	200001dc 	.word	0x200001dc

08000b94 <__malloc_unlock>:
 8000b94:	4801      	ldr	r0, [pc, #4]	@ (8000b9c <__malloc_unlock+0x8>)
 8000b96:	f7ff beab 	b.w	80008f0 <__retarget_lock_release_recursive>
 8000b9a:	bf00      	nop
 8000b9c:	200001dc 	.word	0x200001dc

08000ba0 <__sread>:
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ba8:	f000 f956 	bl	8000e58 <_read_r>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	bfab      	itete	ge
 8000bb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8000bb4:	181b      	addge	r3, r3, r0
 8000bb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bba:	bfac      	ite	ge
 8000bbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000bbe:	81a3      	strhlt	r3, [r4, #12]
 8000bc0:	bd10      	pop	{r4, pc}

08000bc2 <__swrite>:
 8000bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc6:	461f      	mov	r7, r3
 8000bc8:	898b      	ldrh	r3, [r1, #12]
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	4605      	mov	r5, r0
 8000bce:	460c      	mov	r4, r1
 8000bd0:	4616      	mov	r6, r2
 8000bd2:	d505      	bpl.n	8000be0 <__swrite+0x1e>
 8000bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bd8:	2302      	movs	r3, #2
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f000 f92a 	bl	8000e34 <_lseek_r>
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000be6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bea:	81a3      	strh	r3, [r4, #12]
 8000bec:	4632      	mov	r2, r6
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf6:	f000 b951 	b.w	8000e9c <_write_r>

08000bfa <__sseek>:
 8000bfa:	b510      	push	{r4, lr}
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c02:	f000 f917 	bl	8000e34 <_lseek_r>
 8000c06:	1c43      	adds	r3, r0, #1
 8000c08:	89a3      	ldrh	r3, [r4, #12]
 8000c0a:	bf15      	itete	ne
 8000c0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c16:	81a3      	strheq	r3, [r4, #12]
 8000c18:	bf18      	it	ne
 8000c1a:	81a3      	strhne	r3, [r4, #12]
 8000c1c:	bd10      	pop	{r4, pc}

08000c1e <__sclose>:
 8000c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c22:	f000 b94d 	b.w	8000ec0 <_close_r>

08000c26 <__swbuf_r>:
 8000c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c28:	460e      	mov	r6, r1
 8000c2a:	4614      	mov	r4, r2
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	b118      	cbz	r0, 8000c38 <__swbuf_r+0x12>
 8000c30:	6a03      	ldr	r3, [r0, #32]
 8000c32:	b90b      	cbnz	r3, 8000c38 <__swbuf_r+0x12>
 8000c34:	f7ff fd94 	bl	8000760 <__sinit>
 8000c38:	69a3      	ldr	r3, [r4, #24]
 8000c3a:	60a3      	str	r3, [r4, #8]
 8000c3c:	89a3      	ldrh	r3, [r4, #12]
 8000c3e:	071a      	lsls	r2, r3, #28
 8000c40:	d501      	bpl.n	8000c46 <__swbuf_r+0x20>
 8000c42:	6923      	ldr	r3, [r4, #16]
 8000c44:	b943      	cbnz	r3, 8000c58 <__swbuf_r+0x32>
 8000c46:	4621      	mov	r1, r4
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f000 f82b 	bl	8000ca4 <__swsetup_r>
 8000c4e:	b118      	cbz	r0, 8000c58 <__swbuf_r+0x32>
 8000c50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000c54:	4638      	mov	r0, r7
 8000c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	6922      	ldr	r2, [r4, #16]
 8000c5c:	1a98      	subs	r0, r3, r2
 8000c5e:	6963      	ldr	r3, [r4, #20]
 8000c60:	b2f6      	uxtb	r6, r6
 8000c62:	4283      	cmp	r3, r0
 8000c64:	4637      	mov	r7, r6
 8000c66:	dc05      	bgt.n	8000c74 <__swbuf_r+0x4e>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f7ff ff64 	bl	8000b38 <_fflush_r>
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d1ed      	bne.n	8000c50 <__swbuf_r+0x2a>
 8000c74:	68a3      	ldr	r3, [r4, #8]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	60a3      	str	r3, [r4, #8]
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	6022      	str	r2, [r4, #0]
 8000c80:	701e      	strb	r6, [r3, #0]
 8000c82:	6962      	ldr	r2, [r4, #20]
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__swbuf_r+0x6e>
 8000c8a:	89a3      	ldrh	r3, [r4, #12]
 8000c8c:	07db      	lsls	r3, r3, #31
 8000c8e:	d5e1      	bpl.n	8000c54 <__swbuf_r+0x2e>
 8000c90:	2e0a      	cmp	r6, #10
 8000c92:	d1df      	bne.n	8000c54 <__swbuf_r+0x2e>
 8000c94:	4621      	mov	r1, r4
 8000c96:	4628      	mov	r0, r5
 8000c98:	f7ff ff4e 	bl	8000b38 <_fflush_r>
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d0d9      	beq.n	8000c54 <__swbuf_r+0x2e>
 8000ca0:	e7d6      	b.n	8000c50 <__swbuf_r+0x2a>
	...

08000ca4 <__swsetup_r>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <__swsetup_r+0xa8>)
 8000ca8:	4605      	mov	r5, r0
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	460c      	mov	r4, r1
 8000cae:	b118      	cbz	r0, 8000cb8 <__swsetup_r+0x14>
 8000cb0:	6a03      	ldr	r3, [r0, #32]
 8000cb2:	b90b      	cbnz	r3, 8000cb8 <__swsetup_r+0x14>
 8000cb4:	f7ff fd54 	bl	8000760 <__sinit>
 8000cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cbc:	0719      	lsls	r1, r3, #28
 8000cbe:	d422      	bmi.n	8000d06 <__swsetup_r+0x62>
 8000cc0:	06da      	lsls	r2, r3, #27
 8000cc2:	d407      	bmi.n	8000cd4 <__swsetup_r+0x30>
 8000cc4:	2209      	movs	r2, #9
 8000cc6:	602a      	str	r2, [r5, #0]
 8000cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cd2:	e033      	b.n	8000d3c <__swsetup_r+0x98>
 8000cd4:	0758      	lsls	r0, r3, #29
 8000cd6:	d512      	bpl.n	8000cfe <__swsetup_r+0x5a>
 8000cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cda:	b141      	cbz	r1, 8000cee <__swsetup_r+0x4a>
 8000cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d002      	beq.n	8000cea <__swsetup_r+0x46>
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f000 f90d 	bl	8000f04 <_free_r>
 8000cea:	2300      	movs	r3, #0
 8000cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cee:	89a3      	ldrh	r3, [r4, #12]
 8000cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000cf4:	81a3      	strh	r3, [r4, #12]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	6063      	str	r3, [r4, #4]
 8000cfa:	6923      	ldr	r3, [r4, #16]
 8000cfc:	6023      	str	r3, [r4, #0]
 8000cfe:	89a3      	ldrh	r3, [r4, #12]
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	81a3      	strh	r3, [r4, #12]
 8000d06:	6923      	ldr	r3, [r4, #16]
 8000d08:	b94b      	cbnz	r3, 8000d1e <__swsetup_r+0x7a>
 8000d0a:	89a3      	ldrh	r3, [r4, #12]
 8000d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d14:	d003      	beq.n	8000d1e <__swsetup_r+0x7a>
 8000d16:	4621      	mov	r1, r4
 8000d18:	4628      	mov	r0, r5
 8000d1a:	f000 f83f 	bl	8000d9c <__smakebuf_r>
 8000d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d22:	f013 0201 	ands.w	r2, r3, #1
 8000d26:	d00a      	beq.n	8000d3e <__swsetup_r+0x9a>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60a2      	str	r2, [r4, #8]
 8000d2c:	6962      	ldr	r2, [r4, #20]
 8000d2e:	4252      	negs	r2, r2
 8000d30:	61a2      	str	r2, [r4, #24]
 8000d32:	6922      	ldr	r2, [r4, #16]
 8000d34:	b942      	cbnz	r2, 8000d48 <__swsetup_r+0xa4>
 8000d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d3a:	d1c5      	bne.n	8000cc8 <__swsetup_r+0x24>
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	0799      	lsls	r1, r3, #30
 8000d40:	bf58      	it	pl
 8000d42:	6962      	ldrpl	r2, [r4, #20]
 8000d44:	60a2      	str	r2, [r4, #8]
 8000d46:	e7f4      	b.n	8000d32 <__swsetup_r+0x8e>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	e7f7      	b.n	8000d3c <__swsetup_r+0x98>
 8000d4c:	2000001c 	.word	0x2000001c

08000d50 <__swhatbuf_r>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	460c      	mov	r4, r1
 8000d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	b096      	sub	sp, #88	@ 0x58
 8000d5c:	4615      	mov	r5, r2
 8000d5e:	461e      	mov	r6, r3
 8000d60:	da0d      	bge.n	8000d7e <__swhatbuf_r+0x2e>
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d68:	f04f 0100 	mov.w	r1, #0
 8000d6c:	bf14      	ite	ne
 8000d6e:	2340      	movne	r3, #64	@ 0x40
 8000d70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d74:	2000      	movs	r0, #0
 8000d76:	6031      	str	r1, [r6, #0]
 8000d78:	602b      	str	r3, [r5, #0]
 8000d7a:	b016      	add	sp, #88	@ 0x58
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	466a      	mov	r2, sp
 8000d80:	f000 f8ae 	bl	8000ee0 <_fstat_r>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	dbec      	blt.n	8000d62 <__swhatbuf_r+0x12>
 8000d88:	9901      	ldr	r1, [sp, #4]
 8000d8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d92:	4259      	negs	r1, r3
 8000d94:	4159      	adcs	r1, r3
 8000d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d9a:	e7eb      	b.n	8000d74 <__swhatbuf_r+0x24>

08000d9c <__smakebuf_r>:
 8000d9c:	898b      	ldrh	r3, [r1, #12]
 8000d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000da0:	079d      	lsls	r5, r3, #30
 8000da2:	4606      	mov	r6, r0
 8000da4:	460c      	mov	r4, r1
 8000da6:	d507      	bpl.n	8000db8 <__smakebuf_r+0x1c>
 8000da8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	6123      	str	r3, [r4, #16]
 8000db0:	2301      	movs	r3, #1
 8000db2:	6163      	str	r3, [r4, #20]
 8000db4:	b003      	add	sp, #12
 8000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db8:	ab01      	add	r3, sp, #4
 8000dba:	466a      	mov	r2, sp
 8000dbc:	f7ff ffc8 	bl	8000d50 <__swhatbuf_r>
 8000dc0:	9f00      	ldr	r7, [sp, #0]
 8000dc2:	4605      	mov	r5, r0
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff fdb6 	bl	8000938 <_malloc_r>
 8000dcc:	b948      	cbnz	r0, 8000de2 <__smakebuf_r+0x46>
 8000dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dd2:	059a      	lsls	r2, r3, #22
 8000dd4:	d4ee      	bmi.n	8000db4 <__smakebuf_r+0x18>
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	81a3      	strh	r3, [r4, #12]
 8000de0:	e7e2      	b.n	8000da8 <__smakebuf_r+0xc>
 8000de2:	89a3      	ldrh	r3, [r4, #12]
 8000de4:	6020      	str	r0, [r4, #0]
 8000de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dea:	81a3      	strh	r3, [r4, #12]
 8000dec:	9b01      	ldr	r3, [sp, #4]
 8000dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000df2:	b15b      	cbz	r3, 8000e0c <__smakebuf_r+0x70>
 8000df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f80b 	bl	8000e14 <_isatty_r>
 8000dfe:	b128      	cbz	r0, 8000e0c <__smakebuf_r+0x70>
 8000e00:	89a3      	ldrh	r3, [r4, #12]
 8000e02:	f023 0303 	bic.w	r3, r3, #3
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	431d      	orrs	r5, r3
 8000e10:	81a5      	strh	r5, [r4, #12]
 8000e12:	e7cf      	b.n	8000db4 <__smakebuf_r+0x18>

08000e14 <_isatty_r>:
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	4d06      	ldr	r5, [pc, #24]	@ (8000e30 <_isatty_r+0x1c>)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	602b      	str	r3, [r5, #0]
 8000e20:	f7ff fb9b 	bl	800055a <_isatty>
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	d102      	bne.n	8000e2e <_isatty_r+0x1a>
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	b103      	cbz	r3, 8000e2e <_isatty_r+0x1a>
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
 8000e30:	200001e8 	.word	0x200001e8

08000e34 <_lseek_r>:
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	4d07      	ldr	r5, [pc, #28]	@ (8000e54 <_lseek_r+0x20>)
 8000e38:	4604      	mov	r4, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	2200      	movs	r2, #0
 8000e40:	602a      	str	r2, [r5, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	f7ff fb93 	bl	800056e <_lseek>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	d102      	bne.n	8000e52 <_lseek_r+0x1e>
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	b103      	cbz	r3, 8000e52 <_lseek_r+0x1e>
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	bd38      	pop	{r3, r4, r5, pc}
 8000e54:	200001e8 	.word	0x200001e8

08000e58 <_read_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d07      	ldr	r5, [pc, #28]	@ (8000e78 <_read_r+0x20>)
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4611      	mov	r1, r2
 8000e62:	2200      	movs	r2, #0
 8000e64:	602a      	str	r2, [r5, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	f7ff fb24 	bl	80004b4 <_read>
 8000e6c:	1c43      	adds	r3, r0, #1
 8000e6e:	d102      	bne.n	8000e76 <_read_r+0x1e>
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	b103      	cbz	r3, 8000e76 <_read_r+0x1e>
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	200001e8 	.word	0x200001e8

08000e7c <_sbrk_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	4d06      	ldr	r5, [pc, #24]	@ (8000e98 <_sbrk_r+0x1c>)
 8000e80:	2300      	movs	r3, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	f7ff fb7e 	bl	8000588 <_sbrk>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_sbrk_r+0x1a>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_sbrk_r+0x1a>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	200001e8 	.word	0x200001e8

08000e9c <_write_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4d07      	ldr	r5, [pc, #28]	@ (8000ebc <_write_r+0x20>)
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	602a      	str	r2, [r5, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f7ff fb1f 	bl	80004ee <_write>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	d102      	bne.n	8000eba <_write_r+0x1e>
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	b103      	cbz	r3, 8000eba <_write_r+0x1e>
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	200001e8 	.word	0x200001e8

08000ec0 <_close_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4d06      	ldr	r5, [pc, #24]	@ (8000edc <_close_r+0x1c>)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	602b      	str	r3, [r5, #0]
 8000ecc:	f7ff fb2b 	bl	8000526 <_close>
 8000ed0:	1c43      	adds	r3, r0, #1
 8000ed2:	d102      	bne.n	8000eda <_close_r+0x1a>
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	b103      	cbz	r3, 8000eda <_close_r+0x1a>
 8000ed8:	6023      	str	r3, [r4, #0]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
 8000edc:	200001e8 	.word	0x200001e8

08000ee0 <_fstat_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4d07      	ldr	r5, [pc, #28]	@ (8000f00 <_fstat_r+0x20>)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	602b      	str	r3, [r5, #0]
 8000eee:	f7ff fb25 	bl	800053c <_fstat>
 8000ef2:	1c43      	adds	r3, r0, #1
 8000ef4:	d102      	bne.n	8000efc <_fstat_r+0x1c>
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	b103      	cbz	r3, 8000efc <_fstat_r+0x1c>
 8000efa:	6023      	str	r3, [r4, #0]
 8000efc:	bd38      	pop	{r3, r4, r5, pc}
 8000efe:	bf00      	nop
 8000f00:	200001e8 	.word	0x200001e8

08000f04 <_free_r>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	4605      	mov	r5, r0
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	d041      	beq.n	8000f90 <_free_r+0x8c>
 8000f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f10:	1f0c      	subs	r4, r1, #4
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bfb8      	it	lt
 8000f16:	18e4      	addlt	r4, r4, r3
 8000f18:	f7ff fe36 	bl	8000b88 <__malloc_lock>
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f94 <_free_r+0x90>)
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	b933      	cbnz	r3, 8000f30 <_free_r+0x2c>
 8000f22:	6063      	str	r3, [r4, #4]
 8000f24:	6014      	str	r4, [r2, #0]
 8000f26:	4628      	mov	r0, r5
 8000f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f2c:	f7ff be32 	b.w	8000b94 <__malloc_unlock>
 8000f30:	42a3      	cmp	r3, r4
 8000f32:	d908      	bls.n	8000f46 <_free_r+0x42>
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	1821      	adds	r1, r4, r0
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf01      	itttt	eq
 8000f3c:	6819      	ldreq	r1, [r3, #0]
 8000f3e:	685b      	ldreq	r3, [r3, #4]
 8000f40:	1809      	addeq	r1, r1, r0
 8000f42:	6021      	streq	r1, [r4, #0]
 8000f44:	e7ed      	b.n	8000f22 <_free_r+0x1e>
 8000f46:	461a      	mov	r2, r3
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	b10b      	cbz	r3, 8000f50 <_free_r+0x4c>
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d9fa      	bls.n	8000f46 <_free_r+0x42>
 8000f50:	6811      	ldr	r1, [r2, #0]
 8000f52:	1850      	adds	r0, r2, r1
 8000f54:	42a0      	cmp	r0, r4
 8000f56:	d10b      	bne.n	8000f70 <_free_r+0x6c>
 8000f58:	6820      	ldr	r0, [r4, #0]
 8000f5a:	4401      	add	r1, r0
 8000f5c:	1850      	adds	r0, r2, r1
 8000f5e:	4283      	cmp	r3, r0
 8000f60:	6011      	str	r1, [r2, #0]
 8000f62:	d1e0      	bne.n	8000f26 <_free_r+0x22>
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	6053      	str	r3, [r2, #4]
 8000f6a:	4408      	add	r0, r1
 8000f6c:	6010      	str	r0, [r2, #0]
 8000f6e:	e7da      	b.n	8000f26 <_free_r+0x22>
 8000f70:	d902      	bls.n	8000f78 <_free_r+0x74>
 8000f72:	230c      	movs	r3, #12
 8000f74:	602b      	str	r3, [r5, #0]
 8000f76:	e7d6      	b.n	8000f26 <_free_r+0x22>
 8000f78:	6820      	ldr	r0, [r4, #0]
 8000f7a:	1821      	adds	r1, r4, r0
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	bf04      	itt	eq
 8000f80:	6819      	ldreq	r1, [r3, #0]
 8000f82:	685b      	ldreq	r3, [r3, #4]
 8000f84:	6063      	str	r3, [r4, #4]
 8000f86:	bf04      	itt	eq
 8000f88:	1809      	addeq	r1, r1, r0
 8000f8a:	6021      	streq	r1, [r4, #0]
 8000f8c:	6054      	str	r4, [r2, #4]
 8000f8e:	e7ca      	b.n	8000f26 <_free_r+0x22>
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
 8000f92:	bf00      	nop
 8000f94:	200001e4 	.word	0x200001e4

08000f98 <_init>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr

08000fa4 <_fini>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr
